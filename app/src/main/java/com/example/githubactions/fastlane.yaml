name: Android ‚Ä¢ Build & Firebase Distribute

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build type"
        type: choice
        required: true
        default: "debug"
        options:
          - debug
          - release
      flavor:
        description: "Product flavor"
        type: choice
        required: true
        default: "dev"
        options:
          - dev
          - staging
          - uat
          - internal
          - prod
      release_notes:
        description: "Optional release notes (else uses ./release_notes if present, or a default)"
        type: string
        required: false
        default: ""

permissions:
  contents: read

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: "17"

      # Optional non-secret defaults (you can also set these under Actions ‚Üí Variables)
      APP_NAME: ${{ vars.APP_NAME || 'SuperShiftCustomer' }}

      # Inputs
      BUILD_TYPE: ${{ github.event.inputs.build_type }}
      FLAVOR: ${{ github.event.inputs.flavor }}

      # Firebase
      FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}                  # e.g. 1:...:android:...
      FIREBASE_SERVICE_ACCOUNT_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
      GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/.service-account.json

      # Slack
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install tools (jq + Firebase CLI)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          npm install -g firebase-tools@latest

      - name: Write Firebase service account
        run: |
          echo "${FIREBASE_SERVICE_ACCOUNT_JSON}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
          test -s "${GOOGLE_APPLICATION_CREDENTIALS}"

      - name: Ensure release notes file
        run: |
          set -euo pipefail
          if [ "${{ github.event.inputs.release_notes }}" != "" ]; then
            # Use the input to create/overwrite release_notes
            printf "%s" "${{ github.event.inputs.release_notes }}" > ./release_notes
          elif [ ! -f ./release_notes ]; then
            # Create a sensible default if no file exists
            echo "${APP_NAME} ${FLAVOR}-${BUILD_TYPE}" > ./release_notes
          fi
          echo "===== release_notes ====="
          cat ./release_notes || true
          echo "========================="

      - name: Assemble APK/AAB
        run: |
          set -euo pipefail
          # Build task: assemble<Flavor><BuildType> (e.g., assembleDevDebug)
          FLAVOR_CAMEL="$(echo ${FLAVOR^})"
          BUILD_CAMEL="$(echo ${BUILD_TYPE^})"
          TASK="assemble${FLAVOR_CAMEL}${BUILD_CAMEL}"
          echo "Running Gradle task: ${TASK}"
          ./gradlew --no-daemon --stacktrace ${TASK}

      - name: Distribute to Firebase App Distribution
        env:
          # Change to your tester groups or provide testers via --testers
          FAD_GROUPS: "QC,Developers"
        run: |
          set -euo pipefail
          OUTDIR="app/build/outputs"
          # Try to find the variant artifact (.apk or .aab) named *<flavor>-<build_type>*
          ARTIFACT=$(find "${OUTDIR}" -type f \( -name "*${FLAVOR}-${BUILD_TYPE}.apk" -o -name "*${FLAVOR}-${BUILD_TYPE}.aab" \) | head -n 1)
          if [ -z "$ARTIFACT" ]; then
            echo "No artifact found for variant ${FLAVOR}-${BUILD_TYPE}" >&2
            echo "Available files under ${OUTDIR}:"
            find "${OUTDIR}" -type f | sed 's/^/ - /'
            exit 1
          fi

          echo "Distributing ${ARTIFACT} to Firebase App Distribution..."
          # firebase-tools authenticates via GOOGLE_APPLICATION_CREDENTIALS automatically
          firebase appdistribution:distribute "${ARTIFACT}" \
            --app "${FIREBASE_APP_ID}" \
            --release-notes-file ./release_notes \
            --groups "${FAD_GROUPS}" \
            --debug

      - name: Notify Slack (title + release notes)
        if: always()
        run: |
          set -euo pipefail

          # Extract best-effort versionName/versionCode from gradle files
          VERSION_NAME="unknown"
          VERSION_CODE="unknown"
          if [ -f app/build.gradle.kts ]; then
            VN=$(grep -E 'versionName\s*=\s*"' app/build.gradle.kts | head -n1 | sed -E 's/.*"([^"]+)".*/\1/')
            VC=$(grep -E 'versionCode\s*=' app/build.gradle.kts | head -n1 | sed -E 's/.*=\s*([0-9]+).*/\1/')
            [ -n "$VN" ] && VERSION_NAME="$VN"
            [ -n "$VC" ] && VERSION_CODE="$VC"
          elif [ -f app/build.gradle ]; then
            VN=$(grep -E 'versionName' app/build.gradle | head -n1 | sed -E 's/.*"([^"]+)".*/\1/')
            VC=$(grep -E 'versionCode' app/build.gradle | head -n1 | sed -E 's/.*\s([0-9]+).*/\1/')
            [ -n "$VN" ] && VERSION_NAME="$VN"
            [ -n "$VC" ] && VERSION_CODE="$VC"
          fi

          ICON="üõ†Ô∏è"
          if [ "${BUILD_TYPE}" = "release" ]; then ICON="üöÄ"; fi
          if [ "${FLAVOR}" = "staging" ]; then ICON="üîç"; fi
          if [ "${FLAVOR}" = "uat" ]; then ICON="üß™"; fi
          if [ "${FLAVOR}" = "internal" ]; then ICON="üîí"; fi

          TITLE="${ICON} #AndroidApp ${APP_NAME} v${VERSION_NAME}-${FLAVOR}-${BUILD_TYPE} (${VERSION_CODE})"
          NOTES="$(cat ./release_notes || echo '')"

          # Slack payload with message + release notes as an attachment
          PAYLOAD=$(jq -n \
            --arg text "$TITLE" \
            --arg notes "$NOTES" \
            '{text:$text, attachments:[{text:$notes}]}' )

          curl -sS -X POST -H 'Content-type: application/json' \
            --data "$PAYLOAD" \
            "${SLACK_WEBHOOK_URL}" || true

      - name: Upload outputs (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-outputs-${{ github.run_id }}
          path: app/build/outputs/**
          if-no-files-found: ignore
